a <- runif(100)
b <- runif(100)
var(a+b)
a <- runif(100)
b <- runif(100)
var(a+b)
a <- runif(100)
b <- runif(100)
var(a+b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(1000)
b <- runif(1000)
var(2*a+3*b)
a <- runif(1000)
b <- runif(1000)
var(2*a+3*b)
a <- runif(1000)
b <- runif(1000)
var(2*a+3*b)
a <- runif(1000)
b <- runif(1000)
var(2*a+3*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+3*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+3*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 0, 1)
var(3*a+3*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
?runif
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
install.packages("xml2")
# install.packages("xml2")
library(xml2)
?read_xml
?colnames
lst <- list(c("Mon", "Tues"), c("Wed", "Thurs"), "Fri")
lst
names(lst) <- c("x1", "x2", "x3")
lst
x <- matrix(1:6, nrow = 2)
x
lst <- list(
x = c(2.5, 1.2),
y = c(FALSE, TRUE),
z = c("s", "t")
)
lst
lst[[1]]
Sys.getenv("R_LIBS")
R.home()
Sys.getenv("HOME")
,libPaths()
.libPaths()
?.libPaths
R.home()
Sys.getenv("HOME")
getwd()
R.home()
Sys.getenv("HOME")
getwd()
site_path = R.home(component = "home")
fname = file.path(site_path, "etc", "Rprofile.site")
file.exists(fname)
site_path
Sys.getenv("HOME")
Sys.getenv("HOME")
devtools::install_github("csgillespie/efficient", build_vignettes = TRUE)
devtools::install_github("csgillespie/efficient", build_vignettes = TRUE)
install.packages("Rcpp")
install.packages("Rcpp")
devtools::install_github("csgillespie/efficient", build_vignettes = TRUE)
devtools::install_github("csgillespie/efficient")
debug(devtools::install_github("csgillespie/efficient"))
install.packages("Rcpp")
loadedNamespaces()
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
.libPaths()
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages("Rcpp")
library(httr)
install.packages("Rcpp")
install.packages("Rcpp")
update.packages()
y
install.packages("Rcpp")
devtools::install_github("csgillespie/efficient", build_vignettes = TRUE)
# debug(devtools::install_github("csgillespie/efficient"))
devtools::install_github("csgillespie/efficientR")
devtools::install_github("csgillespie/efficientR")
install.packages("microbenchmark")
install.packages("profvis")
library("microbenchmark")
library("profvis")
library("ggplot2")
setwd("D:/GitHub/dc/writing-functions")
setwd("D:/GitHub/dc/write-func")
y <- 10
f <- function(x) {
x + y
}
f(10)
# returns 20; because y is not passed as an argument to the function, R looks outside of the function environment
y <- 10
f <- function(x) {
y <- 5
x + y
}
f(10)
#returns 15; the value of y is defined inside of the function
f <- function(x) {
y <- 5
x + y
}
f(5)
# what is value of y?
# Answer: object 'y' not found; i.e., does not exist in the global environment
?ifelse
?class
?range
range(1:10)
# Define example vector x
x <- 1:10
# Use the function template to create the rescale01 function
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2]- rng[1])
}
rescale01(x)
# Define example vector x
x <- 1:10
# Use the function template to create the rescale01 function
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2]- rng[1])
}
rescale01(x)
rescale(1:20)
rescale01(1:20)
1 - range(1:20, na.rm = TRUE)
1:30 - range(1:20, na.rm = TRUE)
range(1:20)
# Define example vectors x and y
x <- c( 1, 2, NA, 3, NA)
y <- c(NA, 3, NA, 3,  4)
# Turn this snippet into a function: both_na()
both_na <- function(x, y) {
sum(is.na(x) & is.na(y))
}
both_na(x,y)
?runif
runif(1, 0.985, 1.01)
runif(1, 0.985, 1.01)
runif(1, 0.985, 1.01)
runif(100, 0.985, 1.01)
debt <- 5000    # initial debt
i <- 0          # x axis counter
x_axis <- i     # x axis
y_axis <- debt  # y axis
# Initial plot
plot(x_axis, y_axis, xlim = c(0,10), ylim = c(0,5000))
# Graph your debt
while (debt > 0) {
# Updating variables
debt <- debt - 500
i <- i + 1
x_axis <- c(x_axis, i)
y_axis <- c(y_axis, debt)
# Next plot
plot(x_axis, y_axis, xlim = c(0,10), ylim = c(0,5000))
}
my.temp <- 1:10
my.temp
my.temp <- 1:10
for (i in my.temp) {
print(i)
}
x <- runif(10)
seq(x)
library(gapminder); library(dplyr)
data(gapminder)
str(gapminder)
glimpse(gapminder)
library(ggplot2)
# Create dataset of 2007 data
gap2007 <- filter(gapminder, year == 2007)
# Compute groupwise mean and median lifeExp
gap2007 %>%
group_by(continent) %>%
summarize(mean(lifeExp),
median(lifeExp))
# Generate box plots of lifeExp for each continent
gap2007 %>%
ggplot(aes(x = continent, y = lifeExp)) +
geom_boxplot()
gap2007 %>%
group_by(continent) %>%
summarize(sd,
IQR,
n)
gap2007 %>%
group_by(continent) %>%
summarize(sd(lifeExp),
IQR(lifeExp),
n(lifeExp))
gap2007 %>%
group_by(continent) %>%
summarize(sd(lifeExp),
IQR(lifeExp),
n)
gap2007 %>%
group_by(continent) %>%
summarize(sd(lifeExp),
IQR(lifeExp),
n())
gap2007 %>%
group_by(continent) %>%
summarize(sd(lifeExp),
IQR(lifeExp),
n())
gap2007 %>%
ggplot(aes(x = continent, fill = lifeExp)) +
geom_density(alpha = 0.3)
# Compute groupwise measures of spread
gap2007 %>%
group_by(continent) %>%
summarize(sd(lifeExp),
IQR(lifeExp),
n())
# Generate overlaid density plots
gap2007 %>%
ggplot(aes(x = lifeExp, fill = continent)) +
geom_density(alpha = 0.3)
# Create density plot of old variable
gap2007 %>%
ggplot(aes(x = pop)) +
geom_density()
# Transform the skewed pop variable
gap2007 <- gap2007 %>%
mutate(log_pop = log(pop))
# Create density plot of new variable
gap2007 %>%
ggplot(aes(x = log_pop)) +
geom_density()
# Filter for Asia, add column indicating outliers
gap_asia <- gap2007 %>%
filter(continent == "Asia") %>%
mutate(is_outlier = lifeExp < 50)
# Remove outliers, create box plot of lifeExp
gap_asia %>%
filter(!is_outlier) %>%
ggplot(aes(x = 1, y = lifeExp)) +
geom_boxplot()
ls.files()
files.ls()
setwd("D:/GitHub/dc/eda-bray")
list.files()
install.packages("openintro")
library(openintro)
data("email")
library(c(ggplot2, dplry, openintro))
lapply(c("ggplot2", "dplyr", "openintro"), library)
lapply(c("ggplot2", "dplyr", "openintro"), library)
lapply(c("ggplot2", "dplyr", "openintro"), library, character.only = TRUE)
# Load packages
library(ggplot2)
library(dplyr)
library(openintro)
# Compute summary statistics
email %>%
group_by(spam) %>%
summarize(mean(num_char),
sd(num_char))
# Create plot
email %>%
mutate(log_num_char = log(num_char) %>%
ggplot(aes(x = spam, y = log_num_char)) +
geom_boxplot()
# Load packages
library(ggplot2)
library(dplyr)
library(openintro)
# Compute summary statistics
email %>%
group_by(spam) %>%
summarize(mean(num_char),
sd(num_char))
# Create plot
email %>%
mutate(log_num_char = log(num_char)) %>%
ggplot(aes(x = spam, y = log_num_char)) +
geom_boxplot()
# Load packages
library(ggplot2)
library(dplyr)
library(openintro)
# Compute summary statistics
email %>%
group_by(spam) %>%
summarize(median(num_char),
IQR(num_char))
# Create plot
email %>%
mutate(log_num_char = log(num_char)) %>%
ggplot(aes(x = spam, y = log_num_char)) +
geom_boxplot()
# Compute center and spread for exclaim_mess by spam
email %>%
group_by(spam) %>%
summarize(median(exclaim_mess),
IQR(exclaim_mess))
# Create plot for spam and exclaim_mess
# Compute center and spread for exclaim_mess by spam
email %>%
group_by(spam) %>%
summarize(mean(exclaim_mess),
sd(exclaim_mess))
# Create plot for spam and exclaim_mess
# Compute center and spread for exclaim_mess by spam
email %>%
group_by(spam) %>%
summarize(median(exclaim_mess),
IQR(exclaim_mess))
# Create plot for spam and exclaim_mess
email %>%
mutate(log_em = log(exclaim_mess + .01)) %>%
ggplot(aes(x = spam, y = log_em)) +
geom_boxplot()
# Compute center and spread for exclaim_mess by spam
email %>%
group_by(spam) %>%
summarize(median(exclaim_mess),
IQR(exclaim_mess))
# Create plot for spam and exclaim_mess
email %>%
mutate(log_em = log(exclaim_mess + .01)) %>%
ggplot(aes(x = spam, y = log_em)) +
geom_density()
# Compute center and spread for exclaim_mess by spam
email %>%
group_by(spam) %>%
summarize(median(exclaim_mess),
IQR(exclaim_mess))
# Create plot for spam and exclaim_mess
email %>%
mutate(log_em = log(exclaim_mess + .01)) %>%
ggplot(aes(x = spam, fil = log_em)) +
geom_density()
# Alternative plot: Overlaid density plots
email %>%
mutate(log_exclaim_mess = log(exclaim_mess + .01)) %>%
ggplot(aes(x = log_exclaim_mess, fill = spam)) +
geom_density(alpha = 0.3)
# Alternative plot: side-by-side box plots
email %>%
mutate(log_exclaim_mess = log(exclaim_mess + .01)) %>%
ggplot(aes(x = 1, y = log_exclaim_mess)) +
geom_boxplot() +
facet_wrap(~ spam)
# Alternative plot: Overlaid density plots
email %>%
mutate(log_exclaim_mess = log(exclaim_mess + .01)) %>%
ggplot(aes(x = log_exclaim_mess, fill = spam)) +
geom_density(alpha = 0.3)
email$exclaim_mess
glimpse(email$exclaim_mess)
glimpse(log(email$exclaim_mess))
plot(glimpse(log(email$exclaim_mess)))
# Create plot of proportion of spam by image
email %>%
mutate(has_image = image > 0) %>%
ggplot(aes(x = has_image, fill = spam)) +
geom_bar(position = "fill")
# Create plot of proportion of spam by image
email %>%
mutate(has_image = image > 0) %>%
ggplot(aes(x = has_image, fill = spam)) +
geom_bar(position = "fill")
# Create plot of proportion of spam by image
email %>%
mutate(has_image = image > 0) %>%
ggplot(aes(x = has_image, fill = spam)) +
geom_bar(position = "fill")
email
glimpse(email)
# Create plot of proportion of spam by image
email %>%
mutate(has_image = image > 0) %>%
ggplot(aes(x = has_image, fill = spam)) +
geom_bar(position = "fill")
View(email)
# Question 1
email %>%
filter(dollar > 0 ) %>%
group_by(spam) %>%
summarize(median(dollar))
# Question 2
email %>%
filter(dollar > 10 ) %>%
ggplot(aes(x = spam)) +
geom_bar()
