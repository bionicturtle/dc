data("df_zip_demographics")
library(choroplethrZip)
df_zip_demographics$value = df_zip_demographics$median_age
data("df_zip_demographics")
df_zip_demographics$value = df_zip_demographics$median_age
zip_choropleth(df_zip_demographics, state_zoom = "california")
zip_choropleth(df_zip_demographics, state_zoom = "new york")
zip_choropleth(df_zip_demographics, state_zoom = "new york")
zip_choropleth(df_zip_demographics, county_zoom = 06037)
zip_choropleth(df_zip_demographics, county_zoom = 06037,reference_map = TRUE)
zip_choropleth(df_zip_demographics,
county_zoom   = 36061,
title         = "2012 ZIP Code (ZCTA) Demographics",
legend        = "Median Age",
num_colors    = 1,
reference_map = TRUE)
install.packages("ggproto")
install.packages("ggproto")
library(dplyr)
library(hflights)
glimpse(hflights)
unique(hflights$CancellationCode)
lut <- c("A" = "carrier", "B" = "weather", C = "FFA", "D" = "security", "E" = "not cancelled")
hflights$CancellationCode <- lut[hflights$CancellationCode]
glimpse(hflights)
unique(hflights$CancellationCode)
library(hflights)
summary(hflights)
hflights <- tbl_df(hflights)
unique(hflights$CancellationCode)
lut <- c("A" = "carrier", "B" = "weather", "C" = "FFA", "D" = "security", "E" = "not cancelled")
hflights$Code <- lut[hflights$CancellationCode]
glimpse(hflights)
two <- c("AA", "AS")
lut <- c("AA" = "American",
"AS" = "Alaska",
"B6" = "JetBlue")
lut[two]
lut
library(swirl)
rm(list=ls())
?swirl
swirl()
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 1
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "David")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep=" ")
paset(1:3, c("x", "y", "z"))
paste(1:3, c("x", "y", "z"))
paste(1:3, c("x", "y", "z"), sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
swirl()
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vecctor
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 NOT(=) 7
NOT(5 == 7)
?not
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twins", "twins")
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
?which
which(ints > 7)
any(ints < 0)
all(ints > 0)
getwd()
ls()
x <- 9
ls)()
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
?file.path
file.path("mytest3.R")
fo
help
file.path("folder1", "folder2")
?dir.create
d
file
dir.create(file.path("testdir2"), "testdir3")
dir.create(file.path("testdir2"), "testdir3", recursive=TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive=TRUE)
setwd(old.dir)
e;
delete
hello
unlink(testdir)
unlink("testdir", recursive = TRUE)
play()
1
swirl()
play()
nxt()
# Load the ggplot2 package
library(ggplot2)
# Explore the mtcars data frame with str()
str(mtcars)
# Execute the following command
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
# Change the command below so that cyl is treated as factor
ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
geom_point()
# Consider the structure of iris, iris.wide and iris.tidy (in that order)
str(iris)
str(iris.wide)
library(iris)
iris
iris.wide
install.packages(reshape)
install.packages("reshape")
library(reshape2)
library(reshape)
library(reshape)
library(reshape2)
str(iris)
head(iris)
library(reshape2)
iris$id <- 1:nrow(iris)
library(airquality)
airquality
aql <- melt(airquality)
aql
tail(aql)
View(aql)
tail(airquality)
?pt
pt(2, df = 10)
1-pt(2, df = 10)
pnorm(2, lower.tail = 0)
pnorm(2, lower.tail = 0)*2
pt(2, df = 10)
pt(2, df = 50, lower.tail = FALSE)
pt(2, df = 50, lower.tail = FALSE)*2
pt(2, df = 10, lower.tail = FALSE)*2
numbers <- rnorm(10)
for(i in 1:10) {
print(numbers[i])
}
x <- 1:10
numbers[1]
x <- matrix(1:6, 2, 3)
class(x)
str(x)
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
library(dplyr)
library(readr)
## pkgname: package name (character)
## date: YYYY-MM-DD format (character)
num_download <- function(pkgname, date) {
## Construct web URL
year <- substr(date, 1, 4)
src <- sprintf("http://cran-logs.rstudio.com/%s/%s.csv.gz",
year, date)
## Construct path for storing local file
dest <- file.path("data", basename(src))
## Don't download if the file is already there!
if(!file.exists(dest))
download.file(src, dest, quiet = TRUE)
cran <- read_csv(dest, col_types = "ccicccccci", progress = FALSE)
cran %>% filter(package == pkgname) %>% nrow
}
?sprintf
?basename
library(dplyr)
library(readr)
## pkgname: package name (character)
## date: YYYY-MM-DD format (character)
num_download <- function(pkgname, date) {
## Construct web URL
year <- substr(date, 1, 4)
src <- sprintf("http://cran-logs.rstudio.com/%s/%s.csv.gz",
year, date) # sprintf() is handy!
## Construct path for storing local file
dest <- file.path("data", basename(src))
## Don't download if the file is already there!
if(!file.exists(dest))
download.file(src, dest, quiet = TRUE)
cran <- read_csv(dest, col_types = "ccicccccci", progress = FALSE)
cran %>% filter(package == pkgname) %>% nrow
}
year <- substr(date, 1, 4)
date <- "2016-07-20"
year <- substr(date, 1, 4)
year
src <- sprintf("http://cran-logs.rstudio.com/%s/%s.csv.gz", year, date)
src
dest <- file.path("data", basename(src))
dest
src
basename(src)
num_download("filehash", "2016-07-20")
num_download("filehash", "2016-07-20")
check_pkg_deps <- function() {
if(!require(readr)) {
message("installing the 'readr' package")
install.packages("readr")
}
if(!require(dplyr))
stop("the 'dplyr' package needs to be installed first")
}
num_download <- function(pkgname, date = "2016-07-20") {
check_pkg_deps()
dest <- check_for_logfile(date)
cran <- read_csv(dest, col_types = "ccicccccci", progress = FALSE)
cran %>% filter(package %in% pkgname) %>%
group_by(package) %>%
summarize(n = n())
}
num_download(c("filehash", "weathermetrics"))
check_pkg_deps <- function() {
if(!require(readr)) {
message("installing the 'readr' package")
install.packages("readr")
}
if(!require(dplyr))
stop("the 'dplyr' package needs to be installed first")
}
check_for_logfile <- function(date) {
year <- substr(date, 1, 4)
src <- sprintf("http://cran-logs.rstudio.com/%s/%s.csv.gz",
year, date)
dest <- file.path("data", basename(src))
if(!file.exists(dest)) {
val <- download.file(src, dest, quiet = TRUE)
if(!val)
stop("unable to download file ", src)
}
dest
}
num_download <- function(pkgname, date = "2016-07-20") {
check_pkg_deps()
dest <- check_for_logfile(date)
cran <- read_csv(dest, col_types = "ccicccccci", progress = FALSE)
cran %>% filter(package %in% pkgname) %>%
group_by(package) %>%
summarize(n = n())
}
num_download(c("filehash", "weathermetrics"))
swirl()
library(swilr)
library(swirl)
rm(list=ls())
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function()
boring_function
submit()
my_mean(4,5,10)
my_mean(c(4,5,10))
?int
floor(5.4)
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
paste(1,2)
paste0(1,2)
submit()
telegram("hello sweet world")
submit()
mad_libs("town square", "happy", "statue")
mad_libs(place = "town square", adjective = "happy", noun = "statue")
submit()
submit()
"I" %p% "love" %p% "R!"
library(blogdown)
?new_post
rmarkdown::render("1-refresher.R")
setwd("D:/GitHub/dc/writing-functions")
rmarkdown::render("1-refresher.R")
setwd("D:/GitHub/dc/writing-functions")
add <- function(x, y=1) {
x+y
}
environment(add)
#
# Writing a function
# Define ratio() function
ratio <- function(x, y) {
x/y
}
ratio(3,4)
#
# Arguments
# Rewrite the call to follow best practices
mean(0.1,x=c(1:9, NA),TRUE)
mean(x = c(1:9, NA), trim = 0.1, na.rm = TRUE)
mean(c(1:9, NA), trim = 0.1, na.rm = TRUE)
f <- function(x) {
if (TRUE) {
return(x + 1)
}
x
}
y <- 10
f <- function(x) {
print(environment(y))
x + y
}
environment(f)
environment(y)
f(10)
# Correct! Because y is not passed in as an argument to the function, R looks outside of the function environment.
y <- 10
f <- function(x) {
y <- 5
x + y
}
df <- data.frame(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
df <- data.frame()
1:ncol(df)
for (i in 1:ncol(df)) {
print(median(df[[i]]))
}
setwd("D:/GitHub/dc/writing-functions")
my_fun <- function(arg1, arg2) {
body
}
add <- function(x, y=1) {
x+y
}
add <- function(x, y=1) {
x+y
}
formals(add); body(add); environment(add)
add <- function(x, y=1) {
x+y
}
formals(add)
body(add)
environment(add)
BlackScholes <- function(S, K, r, sigma, T) {
body
}
pnorm(.76)
pnorm(.5)
?pnorm
qnorm(.5)
qnorm(1.645)
qnorm(.95)
pnorm(1.645)
log(1)
BlackScholes <- function(S, K, r, sigma, T) {
d1 = (log(S/K) + (r + sigma^2/2)*T)/(sigma*sqrt(T))
d1
}
BlackScholes(10,10,0.02,.2,1)
BlackScholes_call <- function(S, K, r, sigma, T) {
d1 <- (log(S/K) + (r + sigma^2/2)*T)/(sigma*sqrt(T))
d2 <- d1 - sigma*sqrt(T)
Nd1 <- pnorm(d1)
Nd2 <- pnorm(d2)
c <- S*Nd1 - K*exp(-r*T)*Nd2
c
}
BlackScholes(10,10,0.02,.2,1)
BlackScholes_call <- function(S, K, r, sigma, T) {
d1 <- (log(S/K) + (r + sigma^2/2)*T)/(sigma*sqrt(T))
d2 <- d1 - sigma*sqrt(T)
Nd1 <- pnorm(d1)
Nd2 <- pnorm(d2)
c <- S*Nd1 - K*exp(-r*T)*Nd2
c
}
BlackScholes_call(10, 10, 0.02, 0.20, 1)
BlackScholes_call(10, 10, 0.02, 0.20, .5)
BlackScholes_call(8, 10, 0.02, 0.30, .5)
BlackScholes_call(10, 8, 0.02, 0.30, .5)
y <- 10
f <- function(x) {
x + y
}
f(10)
y <- 10
f <- function(x) {
x + y
}
f(10)
# returns 20
y <- 10
f <- function(x) {
y <- 5
x + y
}
f(10)
#returns 15
f <- function(x) {
y <- 5
x + y
}
f(5)
# what is value of y?
y
