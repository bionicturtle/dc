set.seed(20)
n <- 100
rows <- 100
sim <- rnorm(n*rows, 0, 1)
m <- matrix(sim, rows)
for (i in rows) {
es <- numeric(rows)
m_positive <- m[i, ][m[i, ]>0]
es[i] <- mean(m_positive)
es[i]
}
es
# m_pos_only <-
# p_sim <- sim[sim > 0 ]
# mean(p_sim)
# median(p_sim)
set.seed(20)
n <- 100
rows <- 100
sim <- rnorm(n*rows, 0, 1)
m <- matrix(sim, rows)
es <- numeric(rows)
for (i in rows) {
m_positive <- m[i, ][m[i, ]>0]
es[i] <- mean(m_positive)
es[i]
}
es
# m_pos_only <-
# p_sim <- sim[sim > 0 ]
# mean(p_sim)
# median(p_sim)
set.seed(20)
n <- 100
rows <- 100
sim <- rnorm(n*rows, 0, 1)
m <- matrix(sim, rows)
es <- numeric(rows)
for (i in rows) {
m_positive <- m[i, ][m[i, ]>0]
es[i] <- mean(m_positive)
es[i]
}
es
# m_pos_only <-
# p_sim <- sim[sim > 0 ]
# mean(p_sim)
# median(p_sim)
m_positive <- m[1, ][m[1, ]>0]
m_positive
es[1] <- mean(m_positive)
es[1]
m_positive <- m[2, ][m[2, ]>0]
es[2] <- mean(m_positive)
es[2]
es
set.seed(20)
n <- 100
rows <- 100
sim <- rnorm(n*rows, 0, 1)
m <- matrix(sim, rows)
es <- numeric(rows)
for (i in rows) {
m_positive <- m[i, ][m[i, ]>0]
es[i] <- mean(m_positive)
es[i]
}
es
# m_pos_only <-
# p_sim <- sim[sim > 0 ]
# mean(p_sim)
# median(p_sim)
set.seed(20)
n <- 100
rows <- 100
sim <- rnorm(n*rows, 0, 1)
m <- matrix(sim, rows)
es <- numeric(rows)
for (i in rows) {
m_positive <- m[i, ][m[i, ]>0]
es[i] <- mean(m_positive)
}
es
# m_pos_only <-
# p_sim <- sim[sim > 0 ]
# mean(p_sim)
# median(p_sim)
es[1]
set.seed(20)
n <- 100
rows <- 100
sim <- rnorm(n*rows, 0, 1)
m <- matrix(sim, rows)
es <- numeric(rows)
for (i in rows) {
m_positive <- m[i, ][m[i, ]>0]
es[i] <- mean(m_positive)
print(es[i])
}
es
# m_pos_only <-
# p_sim <- sim[sim > 0 ]
# mean(p_sim)
# median(p_sim)
runif(100)
?stdev
?sd
sd(runif(100))
var(runif(100))
var(runif(100))
var(runif(100))
a <- runif(100)
b <- runif(100)
a <- runif(100)
b <- runif(100)
var(a+b)
a <- runif(100)
b <- runif(100)
var(a+b)
a <- runif(100)
b <- runif(100)
var(a+b)
a <- runif(100)
b <- runif(100)
var(a+b)
a <- runif(100)
b <- runif(100)
var(a+b)
a <- runif(100)
b <- runif(100)
var(a+b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(100)
b <- runif(100)
var(2*a+3*b)
a <- runif(1000)
b <- runif(1000)
var(2*a+3*b)
a <- runif(1000)
b <- runif(1000)
var(2*a+3*b)
a <- runif(1000)
b <- runif(1000)
var(2*a+3*b)
a <- runif(1000)
b <- runif(1000)
var(2*a+3*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(1000)
b <- runif(1000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+9*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+3*b)
a <- runif(10000)
b <- runif(10000)
var(3*a+3*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 0, 1)
var(3*a+3*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
a <- runif(10000, 0, 1)
b <- runif(10000, 2, 5)
var(3*a+5*b)
?runif
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
a <- runif(10000, 0, 3)
b <- runif(10000, 4, 10)
var(2*a+5*b)
install.packages("xml2")
# install.packages("xml2")
library(xml2)
?read_xml
?colnames
lst <- list(c("Mon", "Tues"), c("Wed", "Thurs"), "Fri")
lst
names(lst) <- c("x1", "x2", "x3")
lst
x <- matrix(1:6, nrow = 2)
x
lst <- list(
x = c(2.5, 1.2),
y = c(FALSE, TRUE),
z = c("s", "t")
)
lst
lst[[1]]
Sys.getenv("R_LIBS")
R.home()
Sys.getenv("HOME")
,libPaths()
.libPaths()
?.libPaths
R.home()
Sys.getenv("HOME")
getwd()
R.home()
Sys.getenv("HOME")
getwd()
site_path = R.home(component = "home")
fname = file.path(site_path, "etc", "Rprofile.site")
file.exists(fname)
site_path
Sys.getenv("HOME")
Sys.getenv("HOME")
devtools::install_github("csgillespie/efficient", build_vignettes = TRUE)
devtools::install_github("csgillespie/efficient", build_vignettes = TRUE)
install.packages("Rcpp")
install.packages("Rcpp")
devtools::install_github("csgillespie/efficient", build_vignettes = TRUE)
devtools::install_github("csgillespie/efficient")
debug(devtools::install_github("csgillespie/efficient"))
install.packages("Rcpp")
loadedNamespaces()
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
.libPaths()
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages("Rcpp")
library(httr)
install.packages("Rcpp")
install.packages("Rcpp")
update.packages()
y
install.packages("Rcpp")
devtools::install_github("csgillespie/efficient", build_vignettes = TRUE)
# debug(devtools::install_github("csgillespie/efficient"))
devtools::install_github("csgillespie/efficientR")
devtools::install_github("csgillespie/efficientR")
install.packages("microbenchmark")
install.packages("profvis")
library("microbenchmark")
library("profvis")
library("ggplot2")
setwd("D:/GitHub/dc/writing-functions")
setwd("D:/GitHub/dc/write-func")
y <- 10
f <- function(x) {
x + y
}
f(10)
# returns 20; because y is not passed as an argument to the function, R looks outside of the function environment
y <- 10
f <- function(x) {
y <- 5
x + y
}
f(10)
#returns 15; the value of y is defined inside of the function
f <- function(x) {
y <- 5
x + y
}
f(5)
# what is value of y?
# Answer: object 'y' not found; i.e., does not exist in the global environment
?ifelse
?class
?range
range(1:10)
# Define example vector x
x <- 1:10
# Use the function template to create the rescale01 function
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2]- rng[1])
}
rescale01(x)
# Define example vector x
x <- 1:10
# Use the function template to create the rescale01 function
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2]- rng[1])
}
rescale01(x)
rescale(1:20)
rescale01(1:20)
1 - range(1:20, na.rm = TRUE)
1:30 - range(1:20, na.rm = TRUE)
range(1:20)
# Define example vectors x and y
x <- c( 1, 2, NA, 3, NA)
y <- c(NA, 3, NA, 3,  4)
# Turn this snippet into a function: both_na()
both_na <- function(x, y) {
sum(is.na(x) & is.na(y))
}
both_na(x,y)
?runif
runif(1, 0.985, 1.01)
runif(1, 0.985, 1.01)
runif(1, 0.985, 1.01)
runif(100, 0.985, 1.01)
debt <- 5000    # initial debt
i <- 0          # x axis counter
x_axis <- i     # x axis
y_axis <- debt  # y axis
# Initial plot
plot(x_axis, y_axis, xlim = c(0,10), ylim = c(0,5000))
# Graph your debt
while (debt > 0) {
# Updating variables
debt <- debt - 500
i <- i + 1
x_axis <- c(x_axis, i)
y_axis <- c(y_axis, debt)
# Next plot
plot(x_axis, y_axis, xlim = c(0,10), ylim = c(0,5000))
}
my.temp <- 1:10
my.temp
my.temp <- 1:10
for (i in my.temp) {
print(i)
}
?safely
library(purrr)
?safely
library(purrr)
map(list(5,10,20), rnorm)
library(purrr)
map(list(5,10,20), rnorm)
# map2() to iterate over two arguments
map2(list(5,10,20), list(1, 5, 10), rnorm)
library(purrr)
map(list(5,10,20), rnorm)
# map2() to iterate over two arguments
map2(list(5,10,20), list(1, 5, 10), rnorm)
pmap(list(n = list(5, 10, 20),
mean = list(1, 5, 10),
sd = list(0.1, 0.5, 0.1)), rnorm)
library(purrr)
map(list(5,10,20), rnorm)
# map2() to iterate over two arguments
map2(list(5,10,20), list(1, 5, 10), rnorm)
print("this is pmap ....")
pmap(list(n = list(5, 10, 20),
mean = list(1, 5, 10),
sd = list(0.1, 0.5, 0.1)), rnorm)
invoke_map(list(rnorm, runif, rexp), n = 7)
# Initialize n and mu
n <- list(5, 10, 20)
mu <- list(1, 5, 10)
# Create a sd list with the values: 0.1, 1 and 0.1
sd <- list(.1, 1, .1)
# Edit this call to pmap() to iterate over the sd list as well
pmap(list(n, mu, sd), rnorm)
# Define list of functions
f <- list("rnorm", "runif", "rexp")
# Parameter list for rnorm()
rnorm_params <- list(mean = 10)
# Add a min element with value 0 and max element with value 5
runif_params <- list(min = 0, max = 5)
# Add a rate element with value 5
rexp_params <- list(rate = 5)
# Define params for each function
params <- list(
rnorm_params,
runif_params,
rexp_params
)
# Call invoke_map() on f supplying params as the second argument
invoke_map(f, n = 5, params)
?walk
?walk
# Define list of functions
f <- list(Normal = "rnorm", Uniform = "runif", Exp = "rexp")
# Define params
params <- list(
Normal = list(mean = 10),
Uniform = list(min = 0, max = 5),
Exp = list(rate = 5)
)
# Assign the simulated samples to sims
sims <- invoke_map(f, params, n = 50)
# Use walk() to make a histogram of each element in sims
walk(sims, hist)
# Define list of functions
f <- list(Normal = "rnorm", Uniform = "runif", Exp = "rexp")
# Define params
params <- list(
Normal = list(mean = 10),
Uniform = list(min = 0, max = 5),
Exp = list(rate = 5)
)
# Assign the simulated samples to sims
sims <- invoke_map(f, params, n = 50)
breaks_list <- list(
Normal = seq(6, 16, 0.5),
Uniform = seq(0, 5, 0.25),
Exp = seq(0, 1.5, 0.1)
)
# Use walk2() to make histograms with the right breaks
walk2(sims, breaks_list, hist)
?pwalk
options()
options()
getwd()
cd intro-data
cd cd/intro-data
cd dc/intro-data
setwd("D:/GitHub/dc/intro-data")
library(dplyr)
library(openintro)
install.packages("openintro")
library(dplyr)
library(openintro)
data("hsb2")
str(hsb2)
glimpse(hsb2)
eval.data <- load("evals.RData")
eval.data
library(dplyr)
library(openintro)
data("hsb2")
load("evals.RData")
evals
