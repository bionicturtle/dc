facet_grid(.~cyl) +
coord_polar(theta = "y") +
geom_bar(width = 1)
ggplot(mtcars, aes(x = factor(1), fill = am)) +
geom_bar(position = "fill", width = 1) +
facet_grid(. ~ cyl) +
coord_polar(theta = "y")
install.packages("GGally")
install.packages("GGally")
library(GGally)
?gparcoord
?ggparcoord
mtcars[9]
mtcars[-9]
group_by_am <- 9
my_names_am <- (1:11)[-group_by_am]
ggparcoord(mtcars, my_names_am, groupColumn = group_by_am)
ggparcoord(mtcars, my_names_am, groupColumn = group_by_am, scale="uniminmax", order="anyClass")
myColors <- brewer.pal(9, "Reds")
library(RColorBrewer)
myColors <- brewer.pal(9, "Reds")
barley
library(lattice)
barley
library(lattice)
ggplot(barley, aes(x=year, y=variety, fill=yield))) +
geom_tile()
ggplot(barley, aes(x=year, y=variety, fill=yield))) +
geom_tile()
library(ggplot2)
library(RColorBrewer)
library(lattice)
library(ggplot2)
myColors <- brewer.pal(9, "Reds")
ggplot(barley, aes(x=year, y=variety, fill=yield))) +
geom_tile()
ggplot(barley, aes(x=year, y=variety, fill=yield)) +
geom_tile()
ggplot(barley, aes(x=year, y=variety, fill=yield)) +
geom_tile() +
facet_wrap(~ site, ncol = 1)
ggplot(barley, aes(x=year, y=variety, fill=yield)) +
geom_tile() +
facet_wrap(~ site, ncol = 1) +
scale_fill_gradient(myColors)
ggplot(barley, aes(x=year, y=variety, fill=yield)) +
geom_tile() +
facet_wrap(~ site, ncol = 1) +
scale_fill_gradient(colors=myColors)
?scale_fill_gradient
ggplot(barley, aes(x=year, y=variety, fill=yield)) +
geom_tile() +
facet_wrap(~ site, ncol = 1) +
scale_fill_gradients(myColors)
ggplot(barley, aes(x=year, y=variety, fill=yield)) +
geom_tile() +
facet_wrap(~ site, ncol = 1) +
scale_fill_gradientn(myColors)
ggplot(barley, aes(x=year, y=variety, fill=yield)) +
geom_tile() +
facet_wrap(~ site, ncol = 1) +
scale_fill_gradientn(colors=myColors)
ggplot(barley, aes(x=year, y=yield, col=variety, group=variety)) +
geom_line()
ggplot(barley, aes(x=year, y=yield, col=variety, group=variety)) +
geom_line() +
facet_wrap(~ site, nrow = 1)
DT <- data.table(A = letters[c(1, 1, 1, 2, 2)], B = 1:5)
library(data.table)
library(data.table)
install.packages(c("BH", "DBI", "installr", "Rcpp"))
install.packages("installr")
version
install.packages("devtools")
library(devtools)
install_github("StatsWithR/statsr")
install.packages("dplyr")
install.packages("gridExtra")
install_github("StatsWithR/statsr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
install_github("StatsWithR/statsr")
install_github("StatsWithR/statsr")
library(devtools)
install_github("StatsWithR/statsr")
search()
install_github("StatsWithR/statsr")
install_github("StatsWithR/statsr")
library(devtools)
install.packages("devtools")
library(devtools)
install_github("StatsWithR/statsr")
.libPaths()
---
title: "Introduction to data"
library(statsr)
library(dplyr)
library(ggplot2)
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
nycflights %>%
group_by(month) %>%
summarise(median_dd = median(dep_delay)) %>%
arrange(desc(mean_dd))
nycflights %>%
group_by(month) %>%
summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
summarise(nycflights)
data("nycflights")
summarise(nycflights)
nycflights
str(nycflights)
summary(nycflights)
nycflights %>%
group_by(month) %>%
summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
# type your code for Question 8 here, and Knit
nycflights <- nycflights %>%
mutate(avg_speed = distance/hour %>%
arrange(desc(avg_speed))
# type your code for Question 8 here, and Knit
nycflights <- nycflights %>%
mutate(avg_speed = distance/hour) %>%
arrange(desc(avg_speed))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
# type your code for Question 8 here, and Knit
nycflights <- nycflights %>%
mutate(avg_speed = distance/hour) %>%
arrange(desc(avg_speed))
# type your code for Question 8 here, and Knit
nycflights <- nycflights %>%
mutate(avg_speed = distance/air_time) %>%
arrange(desc(avg_speed))
# type your code for Question 8 here, and Knit
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time*60) %>%
arrange(desc(avg_speed))
# type your code for Question 8 here, and Knit
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time*60)) %>%
arrange(desc(avg_speed))
# type your code for Question 8 here, and Knit
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time*60)) %>%
arrange(desc(avg_speed)) %>% select(avg_speed, tailnum)
# type your code for Question 8 here, and Knit
(nycflights) <- nycflights %>%
mutate(avg_speed = distance/(air_time*60)) %>%
arrange(desc(avg_speed)) %>% select(avg_speed, tailnum)
# type your code for Question 8 here, and Knit
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time*60)) %>%
arrange(desc(avg_speed)) %>% select(avg_speed, tailnum)
# type your code for Question 8 here, and Knit
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time*60)) %>%
arrange(desc(avg_speed)) %>% select(avg_speed, tailnum)
data("nycflights")
data("nycflights")
# type your code for Question 8 here, and Knit
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time*60)) %>%
arrange(desc(avg_speed)) %>% select(avg_speed, tailnum)
data("nycflights")
data("nycflights")
# type your code for Question 8 here, and Knit
nycflights %>% mutate(avg_speed = distance/(air_time*60)) %>%
arrange(desc(avg_speed)) %>% select(avg_speed, tailnum)
# type your code for Question 8 here, and Knit
nycflights %>% mutate(avg_speed = distance/(air_time/60)) %>%
arrange(desc(avg_speed)) %>% select(avg_speed, tailnum)
# type your code for Question 9 here, and Knit
ggplot(nycflights, aes(x = avg_speed, y=distance)) +
geom_point()
# type your code for Question 9 here, and Knit
nycflights$avg_speed <- distance/(air_time/60)
ggplot(nycflights, aes(x = avg_speed, y=distance)) +
geom_point()
nycflights$avg_speed <- distance/(air_time/60)
nycflights$avg_speed <- nycflights$distance/(nycflights$air_time/60)
# type your code for Question 9 here, and Knit
nycflights$avg_speed <- nycflights$distance/(nycflights$air_time/60)
ggplot(nycflights, aes(x = avg_speed, y=distance)) +
geom_point()
# type your code for Question 9 here, and Knit
nycflights <- nycflights %>%
mutate(arr_type = ifelse(dep_delay <= 0, "on time", "delayed"))
View(nycflights)
# type your code for Question 9 here, and Knit
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
View(nycflights)
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
# type your code for Question 9 here, and Knit
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate = sum(arr_type == "on time") / n())
# type your code for Question 9 here, and Knit
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate = sum(arr_type == "on time") / n(),sum(arr_type == "on time") )
# type your code for Question 9 here, and Knit
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate = sum(arr_type == "on time") / n(), sum(arr_type == "on time"), n())
nycflights %>%
group_by(month) %>%
summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
# December
# type your code for Question 3 here, and Knit
sfo_feb_flights %>%
group_by(carrier) %>%
summarise( median_ad = median(arr_delay), iqr_ad = IQR(arr_delay))
# American Airlines
sfo_feb_flights <- nycflights %>% filter(dest == "SFO" & month == 2)
# A. 68
# type your code for Question 3 here, and Knit
sfo_feb_flights %>%
group_by(carrier) %>%
summarise( median_ad = median(arr_delay), iqr_ad = IQR(arr_delay))
# American Airlines
nycflights %>%
group_by(month) %>%
summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
# December
install.packages("installr")
library(installr)
library(installr)
installr::updateR()
sessionInfo()
sessionInfo()
sessionInfo()
?installr::
plot(cars)
str(cars)
plot(cars)
?mean.geometric
library(tseries)
library(xts)
?mean.geometric
library(PerformanceAnalytics)
?mean.geometric
?StdDev
?portfolio.optim
?portfolio.optim
?matplot
getwd()
TRUE == 1
(last > 0 & last < 5) | (last > 10 & last < 15)
?colnames
?if
?ifthen
list1 <- list(a = 2, b = 3)
list2 <- list(c = "a", d = "b")
mylist <- list(list1, list2)
rnorm(10)
list3 <- list(rnorm(5))
list3 <- list(rnorm(5), rnorm(4), rnorm(3))
mylist <- c(mylist, list3)
mylist
mylist[[5]]
mylist[[4]]
mylist[[2]]
mylist[[2]]$d
str(mylist)
my.char <- "Hello world"
vec(my.char)
nchar(my.char)
?nchar
library(lubridate)
install.packages("lubridate")
library(lubridate)
?as.character
dmy("17 Sep 2015")
?as.Date
?str_pad
install.packages("tidyverse")
plot(cars)
rnorm(10)
rnorm(15)
rnorm(8)
rnorm(8)
rnorm(8)
rnorm(8)
rnorm(8)
library(tidyverse)
[I'm a link] (https://blog.rstudio.org/2016/09/15/tidyverse-1-0-0/)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages("xts")
library(xts)
library(xts)
x <- matrix(1:4, ncos = 2, nrow = 2)
x <- matrix(1:4, ncos = 2, nrow = 2)
?matrix
x <- matrix(1:4, ncol = 2, nrow = 2)
idx <- as.Date(c("2015-01-01", "2015-02-01"))
x <- xts(x, order.by = idx)
library(xts)
x <- matrix(1:4, ncol = 2, nrow = 2)
idx <- as.Date(c("2015-01-01", "2015-02-01"))
x <- xts(x, order.by = idx)
x
library(Snowballc)
install.packages("SnowballC")
library(Snowballc)
library(SnowballC)
library(Snowballc)
library(Snowballc)
complicate <- c("complicated", "complication", "complicatedly")
stem_doc <- stemDocument(complicate)
library(Snowballc)
library(SnowballC)
complicate <- c("complicated", "complication", "complicatedly")
stem_doc <- stemDocument(complicate)
search()
library(tm)
stem_doc <- stemDocument(complicate)
library(tm)
# library(SnowballC)
# Create complicate
complicate <- c("complicated", "complication", "complicatedly")
# Perform word stemming: stem_doc
stem_doc <- stemDocument(complicate)
# Create the completion dictionary: comp_dict
comp_dict <- "complicate"
# Perform stem completion: complete_text
complete_text <- stemCompletion(stem_doc, comp_dict)
# Print complete_text
complete_text
?sys
?Sys.getenv()
?Sys.getenv("HOME")
Sys.getenv("HOME")
getwd()
getwd()
Sys.getenv("HOME")
library(qdap)
install.packages("qdap")
library(tm)
install.packages("tm")
install.packages("tm")
# Load tm
library(tm)
# Make a vector source: coffee_source
coffee_source <- VectorSource(coffee_tweets)
library(tm)
library(rmarkdown)
install.packages("rmarkdown")
df_zip_demographics$value = df_zip_demographics$median_age
df_zip_demographics$value = df_zip_demographics$median_age
data("df_zip_demographics")
library(choroplethrZip)
df_zip_demographics$value = df_zip_demographics$median_age
data("df_zip_demographics")
df_zip_demographics$value = df_zip_demographics$median_age
zip_choropleth(df_zip_demographics, state_zoom = "california")
zip_choropleth(df_zip_demographics, state_zoom = "new york")
zip_choropleth(df_zip_demographics, state_zoom = "new york")
zip_choropleth(df_zip_demographics, county_zoom = 06037)
zip_choropleth(df_zip_demographics, county_zoom = 06037,reference_map = TRUE)
zip_choropleth(df_zip_demographics,
county_zoom   = 36061,
title         = "2012 ZIP Code (ZCTA) Demographics",
legend        = "Median Age",
num_colors    = 1,
reference_map = TRUE)
install.packages("ggproto")
install.packages("ggproto")
setwd("D:/GitHub/arilamstein")
library(devtools)
# install_github("arilamstein/choroplethrCaCensusTract@v1.1.0")
library(choroplethrCaCensusTract)
data("ca.tract.map")
?ca.tract.map
head(ca.tract.map)
data("ca.tract.regions")
?ca.tract.regions
head(ca.tract.regions)
library(choroplethrCaCensusTract)
?ca_tract_choropleth
data(df_ca_tract_demographics)
colnames(df_ca_tract_demographics)
df_ca_tract_demographics$value = df_ca_tract_demographics$per_capita
ca_tract_choropleth(df_ca_tract_demographics)
ca_tract_choropleth(df_ca_tract_demographics,
title  = "California 2013 Census Tracts",
legend = "Per Capita Income")
ca_tract_choropleth(df_ca_tract_demographics,
title       = "Santa Clara County Census Tracts",
legend      = "Per Capita Income",
county_zoom = 6085)
ca_tract_choropleth(df_ca_tract_demographics,
title       = "Santa Clara County Census Tracts",
legend      = "Per Capita Income",
county_zoom = 6085,
num_colors  = 1)
ca_tract_choropleth(df_ca_tract_demographics,
title         = "Santa Clara Census Tracts",
legend        = "Per Capita Income",
county_zoom   = 6085,
num_colors    = 1,
reference_map = TRUE)
# install.packages("devtools")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')
library(choroplethrZip)
data(zip.map)
?zip.map
head(zip.map)
length(unique(zip.map$region))
data("zip.regions")
?zip.regions
head(zip.regions)
# a zip code in manhattan, new york
# an example to show a Metropolitan Statistical Area (MSA)
zip.regions[zip.regions$region == 10005, ]
# show all zips in New York-Newark-Jersey City, NY-NJ-PA
unique(
zip.regions[zip.regions$cbsa.title == "New York-Newark-Jersey City, NY-NJ-PA", "region"]
)
library(choroplethrZip)
# more interesting data
data("df_zip_demographics")
?df_zip_demographics
colnames(df_zip_demographics)
df_zip_demographics$value = df_zip_demographics$median_age
?zip_choropleth
# state zoom
zip_choropleth(df_zip_demographics, state_zoom = "new york")
#county zoom
zip_choropleth(df_zip_demographics, county_zoom = 06037,reference_map = TRUE)
setwd("D:/GitHub/dc/import-p1")
path_county_facts <- file.path("data/election-president-2016","county_facts.csv")
path_county_dic <- file.path("data/election-president-2016","county_facts_dictionary.csv")
county_facts <- read.csv(path_county_facts)
county_dic <- read.csv(path_county_dic)
library(choroplethr)
library(choroplethrMaps)
county_facts$region = county_facts$fips
county_facts$value = county_facts$PST045214
county_choropleth(county_facts,
title         = "title",
legend        = "pop",
# num_colors    = 2,
state_zoom    = "california",
reference_map = FALSE)
View(county_dic)
path_votes <- file.path("data/election-president-2016","votes.csv")
votes <- read.csv(path_votes)
View(votes)
votes$region = votes$FIPS
View(votes)
?country_choropleth
# library(choroplethr)
# library(choroplethrMaps)
path_votes <- file.path("data/election-president-2016","votes.csv")
votes <- read.csv(path_votes)
votes$region = votes$FIPS
votes$value = votes$Trump
county_choropleth(votes,
title         = "Trump",
legend        = "% Trump",
num_colors    = 1,
state_zoom    = "california",
reference_map = FALSE)
?read.table
?read_csv
library(readr)
?read_csv
?col_factor
?col_integer
library(data.table)
# library(choroplethr)
# library(choroplethrMaps)
library(data.table)
path_votes <- file.path("data/election-president-2016","votes.csv")
# votes <- read.csv(path_votes)
votes <-fread(path_votes)
votes$region = votes$FIPS
votes$value = votes$Trump
county_choropleth(votes,
title         = "Trump",
legend        = "% Trump",
num_colors    = 1,
state_zoom    = "california",
reference_map = FALSE)
